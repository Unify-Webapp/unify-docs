{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started","text":"<p>Last updated: 08-12-2024</p>"},{"location":"#what-is-unify","title":"What is Unify?","text":"<p>Unify is a web app for University clubs to manage events, memberships, and ticket sales. This documentation helps new developers get started and serves as a reference.</p>"},{"location":"#setting-up-development-environment","title":"Setting Up Development Environment","text":""},{"location":"#requirements","title":"Requirements","text":"<ul> <li>VS Code (recommended)</li> <li>Node.js v18: Install instructions. (Choose the right version!)</li> <li>Yarn: a Package manager for Node.js. Install it using <code>npm install -g yarn</code></li> <li>Firebase-tools: <code>npm install -g firebase-tools</code></li> <li>Java v8+: Install instructions.<ul> <li>I had to install <code>openjdk-17-jdk</code> on for Firebase emulator to work fine.</li> </ul> </li> </ul>"},{"location":"#cloning-the-project","title":"Cloning the Project","text":"<ol> <li>Clone the repo: <code>git clone https://github.com/Unify-Webapp/Unify-app/</code></li> <li>Add <code>.env.development</code> file to the project root.</li> <li>Install dependencies: <code>yarn</code> or <code>yarn install</code></li> <li>Run the dev environment: <code>yarn dev</code><ul> <li>For emulator suite: <code>yarn dev:emu</code> (useful for testing Firebase functions locally)</li> </ul> </li> <li>Changes to the frontend auto-refresh the page.</li> </ol>"},{"location":"addingtodocs/","title":"Contributing To The Docs","text":"<p>We're using MkDocs for this documentation. For full documentation visit mkdocs.org.</p>"},{"location":"addingtodocs/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"addingtodocs/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage\n    ...       # Other markdown pages, images and other files.\n    images/   # Folder for images\n</code></pre>"},{"location":"architecture/","title":"Architecture","text":""},{"location":"architecture/#architecture-and-system-overview","title":"Architecture and System Overview","text":"<p>This document provides an overview of the system architecture and design of the system. Any developer new to the project is encouraged to read this document to understand the system's structure and design. Anyone involved with the product stategy aspect of the project may also find this document useful.</p>"},{"location":"architecture/#system-diagram","title":"System Diagram","text":"<p>This  diagram below a high-level overview of the system. You may view it in higher resolution and interactively by clicking here.</p> <p></p>"},{"location":"architecture/#architecture-diagram","title":"Architecture Diagram","text":"<p>Under progress.</p>"},{"location":"dev-practices/","title":"Development Practices","text":"<p>This page documents coding patterns and best practices used in the Unify project.</p>"},{"location":"dev-practices/#using-stripe-cli-to-develop-and-test-webhooks-locally","title":"Using Stripe CLI to Develop and Test Webhooks Locally","text":"<p>The Stripe CLI is a handy tool to interact with the Stripe API. It is particularly useful for developing and testing webhooks locally. This section provides an overview of how to use the Stripe CLI to develop and test webhooks locally.</p>"},{"location":"dev-practices/#prerequisites","title":"Prerequisites","text":"<ul> <li>A Stripe account</li> <li>Stripe CLI installed on your machine</li> <li>A local development server running (e.g., Next.js)</li> </ul>"},{"location":"dev-practices/#installation","title":"Installation","text":""},{"location":"dev-practices/#install-stripe-cli","title":"Install Stripe CLI","text":"<p>To install the Stripe CLI, follow the instructions for your operating system here.</p>"},{"location":"dev-practices/#authentication","title":"Authentication","text":"<p>Authenticate the Stripe CLI with your Stripe account:</p> <pre><code>stripe login\n</code></pre> <p>This command will open a browser window where you can log in to your Stripe account. Once logged in, the CLI will be authenticated and linked to your Stripe account.</p>"},{"location":"dev-practices/#forwarding-webhooks","title":"Forwarding Webhooks","text":"<p>Use the Stripe CLI to forward webhook events to your local server. Replace <code>http://localhost:3000/api/stripe-webhook</code> with your local endpoint:</p> <pre><code>stripe listen --forward-to http://localhost:3000/api/stripe-webhook\n</code></pre> <p>This command will start listening for Stripe events and forward them to your local endpoint.</p>"},{"location":"dev-practices/#triggering-test-events","title":"Triggering Test Events","text":"<p>You can trigger test events using the Stripe CLI. For example, to trigger a <code>checkout.session.completed</code> event, run:</p> <pre><code>stripe trigger checkout.session.completed\n</code></pre> <p>This will send a test event to your local webhook endpoint, allowing you to test your webhook handler.</p>"},{"location":"dev-practices/#webhook-handler-checkout-api-endpoint","title":"Webhook Handler &amp; Checkout API Endpoint","text":"<p>The Stripe aspect of the Unify project requires two api endpoints:</p> <ul> <li>Checkout API Endpoint: Initiates and customizes the checkout process, handling secure payments and order tracking.</li> <li>Webhook Handler: Manages real-time updates and automated actions from Stripe events.<ul> <li>We perform the fee-deduction logic here as well.</li> </ul> </li> </ul>"},{"location":"dev-practices/#how-they-work-together","title":"How They Work Together","text":"<ol> <li>User Checkout: User initiates a purchase, triggering the checkout API endpoint.</li> <li>Create Session: The endpoint creates a checkout session with Stripe and redirects the user to Stripe's checkout page.</li> <li>Complete Payment: User completes payment on Stripe's page.</li> <li>Receive Notification: Stripe sends a <code>checkout.session.completed</code> event to the webhook handler.</li> <li>Process Event: The webhook handler updates order status, captures payment, and sends confirmation emails.</li> <li>Fulfill Order: Your application proceeds with order fulfillment.</li> </ol>"},{"location":"dev-practices/#common-issues","title":"Common Issues","text":""},{"location":"dev-practices/#missing-metadata","title":"Missing Metadata","text":"<p>When using the Stripe CLI to trigger events, the generated events may not include all the custom metadata fields you set in your actual application. Ensure your webhook handler handles the absence of these fields gracefully.</p>"},{"location":"dev-practices/#api-key-permissions","title":"API Key Permissions","text":"<p>When using Stripe CLI, you can't pass metadata (or maybe you can, I didn't have enough time to find out), hence it'll complain that the API key is wrong even though it isn't. Instead, hardcode an account number for testing purposes.</p>"},{"location":"techstack/","title":"Tech Stack","text":"<p>We use a serverless architecture, so the distinction between \"Frontend\" and \"Backend\" isn't necessary.</p> <ul> <li>NextJS: Framework on top of React with features like easy page routing and image compression. We use the \"pages\" router. More info</li> <li>React: Library for creating reusable, dynamic UI components.</li> <li>Tailwind CSS: CSS framework for writing CSS within HTML.</li> <li>TypeScript: Type-strict version of JavaScript.</li> <li>Firebase: Serverless tools suite by Google.<ul> <li>Firestore: NoSQL database.</li> <li>Firebase Auth: User authentication.</li> <li>Firebase-Stripe-Extension: Interacts with Stripe via Firestore (currently redundant as of 08-12-2024).</li> </ul> </li> <li>Stripe: Payment processing for memberships and event tickets.</li> </ul>"},{"location":"techstack/#linting-and-formatting","title":"Linting and Formatting","text":"<ul> <li>Prettier: Code formatter. Run <code>yarn lint:fix</code> to format all files. Enable \"format on save\" in VS Code.</li> <li>ESLint: Enforces coding rules to reduce bugs and ensure consistency.</li> </ul>"}]}